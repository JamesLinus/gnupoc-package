GnuPoc S60 SDK patches
======================

Installation
------------

Start by installing the toolchain for your SDK. For Series 60 1st and 2nd
edition, you at least need GCC, but you can also install native versions
of e.g. rcomp, makesis, petran and bmconv. For Series 60 3rd edition,
install CodeSourcery's ARM GCC, tested with the 2005Q1C release but other
releases might work, too.

Instructions for installing these tools are available at
http://www.martin.st/symbian/.

Then download the SDK you want to install, from Forum Nokia
(www.forum.nokia.com). The following versions are supported at the moment:

1st Edition, FP1, WINS			nS60_sdk_v1_2.zip
2nd Edition, WINS			s60_sdk_v2_0.zip
2nd Edition, FP1, WINS			S60_SDK_2_1_NET.zip
2nd Edition, FP1, CW			S60_SDK_v21c_CW.zip
2nd Edition, FP2, WINS			s60_2nd_fp2_sdk_msb.zip
2nd Edition, FP2, CW			s60_2nd_fp2_sdk.zip
2nd Edition, FP3			s60_2nd_sdk_fp3.zip
3rd Edition, Maintenance Release	S60-SDK-0616-3.0-mr.3.749.zip
3rd Edition, FP 1			S60-SDK-200634-3.1-Cpp-f.1090b.zip

Install them using the matching install scripts, e.g.:
./install_gnupoc_s60_30 ../S60-SDK-0616-3.0-mr.3.749.zip ~/symbian-sdks/s60_30

After installing the first SDK, you have to copy uidcrc.exe from the
epoc32/tools directory within your newly installed SDK to a directory
within your wine path, e.g. ~/.wine/drive_c/windows. It shouldn't matter
which SDK you copy this from.

If using external makefiles (as for building icons in 3rd edition),
copy make.exe and mifconv.exe, too. make.exe probably can be used from
any SDK version, but you'll need mifconv.exe from the 3.0 SDK, since
mifconv.exe in 3.1 has some problems starting within wine.

When using the SDKs, set the EPOCROOT variable to point to your SDK and
add the epoc32/tools directory and your toolchain to your PATH, e.g.:

export EPOCROOT=~/symbian-sdks/s60_30/
export PATH=~/csl-gcc/bin:${EPOCROOT}epoc32/tools:${PATH}

Or, more conveniently, install wrapper scripts:
./install_wrapper ~/gnupoc

Using these wrapper scripts, you only have to add the wrapper directory to
your PATH, and the wrappers call the correct tools depending on the EPOCROOT
variable. The wrappers also include sign.sh, to avoid having to enter
the key password on the command line.

These installations can also use the Visual C++ 2003 and/or Codewarrior
compilers. Make sure the binaries are within the wine path. For Codewarrior,
you also have to set the MWCSym2Includes, MWSym2Libraries and
MWSym2LibraryFiles variables in the unix environment, since the perl build
scripts need them for determining the compiler version.


Usage
-----

After installing everything, you're able to compile things in the same way
as on windows. The install scripts clean up the usage of lower/upper case
in the bundled examples (by forcing them to lowercase), so they should all
be buildable directly. (Or at least it tries to, it might not work reliably
in stranger examples.) To build the hello world example, do the following:

export PATH=~/gnupoc:${PATH}
export EPOCROOT=~/symbian-sdks/s60_30/
cd ~/symbian-sdks/s60_30/s60ex/helloworldbasic/group
bldmake bldfiles
abld build gcce urel
cd ../sis
makesis helloworldbasic_gcce.pkg helloworldbasic.sis

Then create a self-signed certificate if you haven't got one already:
makekeys -cert -password mypassword -dname "CN=Joe Bloggs OU=Development OR=Acme Ltd CO=GB EM=noone@nowhere.com" mykey.key mycert.cer

Then sign the sis file using this certificate and key:
sign.sh helloworldbasic.sis helloworldbasic.sisx mycert.cer mykey.key

The certificate and signing is only needed on Series 60 3rd edition.


Sharing an installation
-----------------------

If the SDK installation is to be shared by many users on a multiuser
system, one might want to install a read-only copy of the SDK.

However, the Symbian SDK structure requires every user to be able to
write to the SDK, especially to the epoc32/build directory. A solution
to this is to create a writeable copy of the directory structure, where
all the original files are symbolic links to the original copies. (It
still uses quite a bit of diskspace, but remarkably less than the whole
SDK.)

The included script makelinkdir can be used to create such a copy of the
directory structure. If a read-only copy of the SDK is installed in
e.g. /usr/local/symbian-sdks/s60_21_cw/, a user can create a usable
copy of his own of the SDK:

./makelinkdir /usr/local/symbian-sdks/s60_21_cw ~/symbian-sdks/s60_21_cw
export EPOCROOT=~/symbian-sdks/s60_21_cw

At this stage, all the files which were installed in the SDK are available
in this local copy as links to read-only files. This works fine for
building code, which only creates new files and directories. But for running
the emulator, the existing files within the epoc32/wins(cw) directory must
be writeable. In that case, do the following:

cd ~/symbian-sdks/s60_21_cw/epoc32
rm -rf winscw
cp -Lr /usr/local/symbian-sdks/s60_21_cw/epoc32/winscw .
chmod -R u+w winscw

That is, the epoc32/winscw directory is replaced with a copy containing
real writeable copies of all files.


License
-------

The patches are based on earlier GnuPoc patches by Alfred E. Heggestad
and modified by me. The patches and the accompanying installation scripts
are redistributable and usable according to the Gnu Public License (GPL),
see the COPYING file. This only covers the patches, though; the use and
redistribution of the SDKs still is restricted by their end user license
agreements.



Martin Storsjö
martin@martin.st

