From 4ca8683435718ccc9c75caed17a950669a4a7ede Mon Sep 17 00:00:00 2001
From: Martin Storsjo <martin@martin.st>
Date: Mon, 9 Aug 2010 20:04:44 +0300
Subject: [PATCH] Handle multiple copies of the same data in solid NSIS archives

---
 CPP/7zip/Archive/Nsis/NsisHandler.cpp |   30 ++++++++++++++++++++++++++++++
 CPP/7zip/Archive/Nsis/NsisIn.cpp      |    2 +-
 2 files changed, 31 insertions(+), 1 deletions(-)

diff --git a/CPP/7zip/Archive/Nsis/NsisHandler.cpp b/CPP/7zip/Archive/Nsis/NsisHandler.cpp
index 8005ddb..2b66513 100644
--- a/CPP/7zip/Archive/Nsis/NsisHandler.cpp
+++ b/CPP/7zip/Archive/Nsis/NsisHandler.cpp
@@ -313,6 +313,8 @@ STDMETHODIMP CHandler::Extract(const UInt32 *indices, UInt32 numItems,
   const UInt32 kBufferLength = 1 << 16;
   byteBuf.SetCapacity(kBufferLength);
   Byte *buffer = byteBuf;
+  CByteBuffer cloneBuf;
+  UInt64 clonePos;
 
   bool dataError = false;
   for (i = 0; i < numItems; i++, currentTotalSize += currentItemSize)
@@ -361,6 +363,13 @@ STDMETHODIMP CHandler::Extract(const UInt32 *indices, UInt32 numItems,
         if (_archive.IsSolid)
         {
           UInt64 pos = _archive.GetPosOfSolidItem(index);
+          bool clone = false;
+          if (i + 1 < numItems)
+          {
+            UInt32 nextIndex = allFilesMode ? i + 1 : indices[i + 1];
+            if (_archive.GetPosOfSolidItem(nextIndex) == pos)
+                clone = true; 
+          }
           while(streamPos < pos)
           {
             size_t processedSize = (UInt32)MyMin(pos - streamPos, (UInt64)kBufferLength);
@@ -390,6 +399,25 @@ STDMETHODIMP CHandler::Extract(const UInt32 *indices, UInt32 numItems,
             fullSize = Get32(buffer2);
             sizeIsKnown = true;
             needDecompress = true;
+            if (clone && fullSize < 20*1024*1024) // Don't clone files larger than this via internal buffers
+            {
+                cloneBuf.SetCapacity(fullSize);
+                clonePos = pos;
+            }
+            else
+            {
+                cloneBuf.Free();
+                clonePos = 0;
+            }
+          }
+          else
+          {
+            // We've moved past this file, check if we've stored the contents for a quick clone
+            if (clonePos == pos)
+            {
+              if (!testMode)
+                RINOK(WriteStream(realOutStream, cloneBuf, cloneBuf.GetCapacity()));
+            }
           }
         }
         else
@@ -434,6 +462,8 @@ STDMETHODIMP CHandler::Extract(const UInt32 *indices, UInt32 numItems,
                   dataError = true;
                 break;
               }
+              if (cloneBuf.GetCapacity() > 0)
+                  memcpy((unsigned char*)cloneBuf + offset, buffer, processedSize);
               
               fullSize -= (UInt32)processedSize;
               streamPos += processedSize;
diff --git a/CPP/7zip/Archive/Nsis/NsisIn.cpp b/CPP/7zip/Archive/Nsis/NsisIn.cpp
index 290349a..e25f7e3 100644
--- a/CPP/7zip/Archive/Nsis/NsisIn.cpp
+++ b/CPP/7zip/Archive/Nsis/NsisIn.cpp
@@ -1151,7 +1151,7 @@ HRESULT CInArchive::ReadEntries(const CBlockHeader &bh)
       bool sameName = IsUnicode ?
         (Items[i].NameU == Items[i + 1].NameU) :
         (Items[i].NameA == Items[i + 1].NameA);
-      if (Items[i].Pos == Items[i + 1].Pos && (IsSolid || sameName))
+      if (Items[i].Pos == Items[i + 1].Pos && sameName)
         Items.Delete(i + 1);
       else
         i++;
-- 
1.7.1

